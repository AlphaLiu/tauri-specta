/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

export const commands = {
  /**
   * HELLO
   * WORLD
   * !!!!
   */
  async helloWorld(myName: string): Promise<string> {
    return await TAURI_INVOKE<string>("plugin:tauri-specta|hello_world", {
      myName,
    });
  },
  async goodbyeWorld(): Promise<string> {
    return await TAURI_INVOKE<string>("plugin:tauri-specta|goodbye_world");
  },
  async hasError(): Promise<__Result__<string, number>> {
    try {
      return [
        await TAURI_INVOKE<string>("plugin:tauri-specta|has_error"),
        undefined,
      ];
    } catch (e: any) {
      if (e instanceof Error) throw e;
      else return [undefined, e];
    }
  },
  async someStruct(): Promise<MyStruct> {
    return await TAURI_INVOKE<MyStruct>("plugin:tauri-specta|some_struct");
  },
};

export const events = __makeEvents__<{
  demoEvent: DemoEvent;
  emptyEvent: EmptyEvent;
}>({
  demoEvent: "plugin:tauri-specta:demo-event",
  emptyEvent: "plugin:tauri-specta:empty-event",
});

export type MyStruct = { some_field: string };
export type DemoEvent = string;
export type EmptyEvent = null;

import { invoke as TAURI_INVOKE } from "@tauri-apps/api";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

type __Result__<T, E> = [T, undefined] | [undefined, E];

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]>;
    },
    {
      get: (_, event) =>
        new Proxy({} as __EventObj__<any>, {
          get: (_, command: keyof __EventObj__<any>) => {
            const name = mappings[event as keyof T];

            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        }),
    }
  );
}
