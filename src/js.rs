use heck::ToLowerCamelCase;
use indoc::writedoc;
use specta::{
    function::FunctionDataType,
    ts::{self, TsExportError},
    TypeDefs,
};
use std::{
    fs::{self, File},
    io::Write,
    path::{Path, PathBuf},
};

pub fn export_with_cfg(
    (function_types, _): (Vec<FunctionDataType>, TypeDefs),
    export_path: impl AsRef<Path>,
    cfg: specta::ts::ExportConfiguration,
) -> Result<(), TsExportError> {
    let export_path = PathBuf::from(export_path.as_ref());

    if let Some(export_dir) = export_path.parent() {
        fs::create_dir_all(export_dir)?;
    }

    let mut file = File::create(export_path)?;

    writedoc!(
        file,
        r#"
            // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

            const invoke = window.__TAURI_INVOKE__;
        "#
    )?;

    for function in function_types {
        let name = &function.name;
        let name_camel = function.name.to_lower_camel_case();

        let arg_list = function
            .args
            .iter()
            .map(|(name, _)| name.to_lower_camel_case())
            .collect::<Vec<_>>();

        let arg_defs = arg_list.join(", ");

        let arg_usages = arg_list
            .is_empty()
            .then(Default::default)
            .unwrap_or_else(|| format!(", {{ {} }}", arg_list.join(", ")));

        let arg_jsdocs = function
            .args
            .iter()
            .map(|(name, typ)| {
                ts::datatype(&cfg, typ).map(|typ| {
                    let name = name.to_lower_camel_case();

                    format!("\n * @param {{ {typ} }} {name}")
                })
            })
            .collect::<Result<Vec<_>, _>>()?
            .join("\n");

        let ret_type = ts::datatype(&cfg, &function.result)?;

        writedoc!(
            file,
            r#"

                /** {arg_jsdocs}
                 * @returns {{ Promise<{ret_type}> }}
                 */
                export function {name_camel}({arg_defs}) {{
                    return invoke("{name}"{arg_usages})
                }}
            "#
        )?;
    }

    Ok(())
}
pub fn export(
    macro_data: (Vec<FunctionDataType>, TypeDefs),
    export_path: impl AsRef<Path>,
) -> Result<(), TsExportError> {
    export_with_cfg(macro_data, export_path, Default::default())
}
