use std::{
    fs::{self, File},
    io::{self, Write},
    path::{Path, PathBuf},
};

use specta::{ts, TypeDefs};

use crate::Commands;

pub fn export_to_ts(
    (commands, type_map): (Commands, TypeDefs),
    export_path: impl AsRef<Path>,
) -> Result<(), io::Error> {
    let export_path = PathBuf::from(export_path.as_ref());
    if let Some(export_dir) = export_path.parent() {
        fs::create_dir_all(export_dir)?;
    }
    let mut file = File::create(export_path)?;
    // if let Some(header) = &self.config.bindings_header {
    //     writeln!(file, "{}", header)?;
    // }
    writeln!(file, "// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.\n")?;
    writeln!(file, "{}", ts::export_datatype(&commands.into()).unwrap())?;

    for export in type_map
        .values()
        .filter_map(|v| ts::export_datatype(v).ok())
    {
        writeln!(file, "\n{}", export)?;
    }

    Ok(())
}
